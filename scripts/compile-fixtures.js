/**
 * Medic Forms: A flexible data collection system
 *
 * Copyright 2013-2014 David Brown <david@medicmobile.org>
 * Copyright 2013-2014 Medic Mobile, Inc. <hello@medicmobile.org>
 * All rights reserved.
 *
 * Medic Forms is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, version three.
 *
 * You should have received a copy of version three of the GNU General
 * Public License along with this file. If you did not, you can download a
 * copy from http://www.gnu.org/licenses/.
 *
 * Medic Forms is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 * Public License for more details.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL DAVID BROWN OR MEDIC MOBILE BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

'use strict';

/**
 * This script is executed as one of the npm postinstall hooks.
 * It puts all the test fixtures data into tests/fixtures.js, and
 * then exports the fixtures object.
 */

var fs = require('fs'),
    path = require('path'),
    _ = require('underscore'),
    moment = require('moment'),
    util = require('./include/util');


/**
 * @name main:
 */
var main = function (_argc, _argv) {

  var output_path = "tests/unit/fixtures/compiled.js";

  /* Build file */
  var data = [
    "/* Generated by compile-fixtures.js on "
      + moment().local().format('YYYY-MM-DD [at] hh:mma') + ' */',
    "var fs = require('fs');", '',
    '/* Top-level fixtures object */',
    "exports.all = {};", ''
  ];

  /* Append all test fixtures */
  _read_directory("tests/unit/fixtures", data);

  /* Write output */
  fs.writeFileSync(output_path, data.join("\n"));

  /* Success */
  process.stderr.write(
    "File `" + output_path + "` generated successfully.\n"
  );

  return 0;
};


/**
 * conver the path to objects
 * tests/fixtures/forms --> tests.fixtures.forms = {};
 * tests/fixtures/forms/invalid.json --> tests.fixtures.forms.invalid
 * @param  {[type]} path [description]
 * @return {[type]}      [description]
 */
function _object_name_from_path(_path, _base_path) {

  /* Strip base path */
  if (_path.indexOf(_base_path) === 0) {
    _path = _path.substring(_base_path.length);
  }

  /* Convert path to object notation */
  var name = _path.split("/").join(".").replace(/\.json$/, '');

  return name.replace(/[^A-Za-z0-9\_\.]/g, "_");
}



/**
 * @name _get_line_data:
 */
function _get_line_data (_fpath, _is_file, _base_path) {

  var dot_path = _object_name_from_path(_fpath, _base_path);

  if (_is_file) {
    return (
      "/* File: " + _fpath + " */ \n" +
        'exports' + dot_path + " = JSON.parse('" +
          util.escape_json_string(fs.readFileSync(_fpath)) + "');\n"
    );
  } else {
    return (
      "/* Directory: " + _fpath + " */ \n" +
        'exports' + dot_path + " = {};\n"
    );
  }
}


/**
 * @name _read_directory:
 */
function _read_directory (_path, _data, _base_path) {

  var files = fs.readdirSync(_path);
  var base_path = (_base_path || _path);

  _.each(files, function (_element, _index) {

    var fpath = path.join(_path, _element);
    var fstats = fs.statSync(fpath);

    /* Skip dot-prefixed files/directories */
    if (_element.match(/^\./)) {
      return;
    }
    
    /* Process files */
    if (fstats.isDirectory()) {

      /* Emit directory object */
      _data.push(_get_line_data(fpath, false, base_path));

      /* Recur in to directory */
      _read_directory(fpath, _data, base_path);

    } else if (fstats.isFile()) {

      /* Only process .json files */
      if (_element.match(/\.json$/)) {
        _data.push(_get_line_data(fpath, true, base_path));
      }
    }
  });
}


/* Entry point:
 *   Start `main` and exit with the returned status. */

process.exit(
  main(process.argv.length, process.argv)
);

